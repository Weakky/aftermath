/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parser.Parsing;

import Builder.Engine;
import Builder.ScriptDelegate;
import Builder.StdDraw;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rsyntaxtextarea.SyntaxScheme;
import org.fife.ui.rsyntaxtextarea.Theme;
import parser.Shared.ScriptException;

import javax.swing.*;
import java.awt.*;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Arrays;

/**
 *
 * @author Utilisateur
 */
public class parserForm extends javax.swing.JFrame {

    /**
     * Creates new form parserForm
     */
    public parserForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        rSyntaxTextArea1 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();

        rSyntaxTextArea1.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_VISUAL_BASIC);
        rSyntaxTextArea1.setCodeFoldingEnabled(true);

        rSyntaxTextArea1.setText("function Main()\nend function");


        try {
            Theme t = Theme.load(new FileInputStream("//C:\\Users\\Utilisateur\\Desktop\\dark.xml"));
            t.apply(rSyntaxTextArea1);
        } catch (IOException e) {
            e.printStackTrace();
        }

        setFont(rSyntaxTextArea1, new Font("Comic Sans MS", Font.PLAIN, 21));



        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Aftermath CLI");
        setName("Aftermath CLI"); // NOI18N

        jButton1.setText("Compile Script");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButton1ActionPerformed(evt);
                } catch (ScriptException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setFont(new Font("Comic Sans MS", Font.PLAIN, 25));
        jScrollPane1.setViewportView(jTextArea1);

        rSyntaxTextArea1.setColumns(20);
        rSyntaxTextArea1.setRows(5);
        jScrollPane2.setViewportView(rSyntaxTextArea1);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Abstract Syntax Tree");

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Build");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void setFont(RSyntaxTextArea textArea, Font font) {
        if (font != null) {
            SyntaxScheme ss = textArea.getSyntaxScheme();
            ss = (SyntaxScheme) ss.clone();
            for (int i = 0; i < ss.getStyleCount(); i++) {
                if (ss.getStyle(i) != null) {
                    ss.getStyle(i).font = font;
                }
            }
            textArea.setSyntaxScheme(ss);
            textArea.setFont(font);
        }
    }

    public static Engine scriptEngine = new Engine();

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) throws ScriptException, IOException, URISyntaxException {//GEN-FIRST:event_jButton1ActionPerformed


            // TODO add your handling code here:

            //Tokenize the expression
            jTextArea1.setText("");

            String inputSource = rSyntaxTextArea1.getText();

            ScriptDelegate printFunction = new ScriptDelegate() {
                @Override
                public Object run(Object... args) {
                    if (args.length > 0)
                        jTextArea1.setText(jTextArea1.getText() + "\n" + String.valueOf(args[0]));
                    return null;
                }
            };


        ScriptDelegate startWebsite = new ScriptDelegate() {
            @Override
            public Object run(Object... args) throws URISyntaxException, IOException {
                Desktop.getDesktop().browse(new URI(String.valueOf(args[0])));
                return null;
            }
        };

        ScriptDelegate evaluateDelegate = new ScriptDelegate() {
            @Override
            public Object run(Object... args) throws URISyntaxException, IOException, ScriptException {

                String expression = String.valueOf(args[0]);
                String var = String.valueOf(args[1]);
                double min = Double.parseDouble(String.valueOf(args[2]));
                double max = Double.parseDouble(String.valueOf(args[3]));

                // number of line segments to plot
                int N = 2000;

                // between [min, max]
                double[] x = new double[N+1];
                double[] y = new double[N+1];

                for (int i = 0; i <= N; i++) {
                    x[i] = min + i*(max-min)/(N-1);
                    y[i] = Double.parseDouble(scriptEngine.Evaluate(expression.replace(var, String.valueOf(x[i]))));
                }

                Arrays.sort(y);
                double yMin = y[0];
                double yMax = y[y.length-1];

                // rescale the coordinate system
                StdDraw.setXscale(min, max);
                StdDraw.setYscale(yMin, yMax);

                // plot the approximation to the function
                for (int i = 0; i < N; i++) {
                    StdDraw.line(x[i], y[i], x[i+1], y[i+1]);
                }


                return null;
            }
        };

        ScriptDelegate sinFunc = new ScriptDelegate() {
            @Override
            public Object run(Object... args) throws URISyntaxException, IOException, ScriptException {
                return Math.sin(Double.parseDouble(args[0].toString()));
            }
        };

        ScriptDelegate powFunc = new ScriptDelegate() {
            @Override
            public Object run(Object... args) throws URISyntaxException, IOException, ScriptException {
                double out = Math.pow(Double.parseDouble(args[0].toString()),Double.parseDouble(args[1].toString()));
                return out;
            }
        };

        ScriptDelegate sqrtFunc = new ScriptDelegate() {
            @Override
            public Object run(Object... args) throws URISyntaxException, IOException, ScriptException {
                return Math.sqrt(Double.parseDouble(args[0].toString()));
            }
        };

            scriptEngine.addDelegates("evaluate", evaluateDelegate);
            scriptEngine.addDelegates("print", printFunction);
            scriptEngine.addDelegates("start", startWebsite);

            scriptEngine.addDelegates("sqrt", sqrtFunc);
            scriptEngine.addDelegates("sin", sinFunc);
            scriptEngine.addDelegates("pow", powFunc);

           scriptEngine.Execute(inputSource);


    }//GEN-LAST:event_jButton1ActionPerformed


    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:

        JFrame astForm = new astFrm();
        astForm.setVisible(true);

    }//GEN-LAST:event_saveMenuItemActionPerformed



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(parserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(parserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(parserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(parserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            parserForm pf = new parserForm();
          //  pf.jTextArea2.setText("function Main()\nend function");
            pf.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuBar menuBar;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea rSyntaxTextArea1;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
